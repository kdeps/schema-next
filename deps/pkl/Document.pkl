/// Common parser and document renderer functions used across all resources.
///
/// Tools for Parsing and Generating JSON, YAML and XML documents
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/document" }

open module org.kdeps.pkl.Document

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"

import "pkl:json"
import "pkl:test"
import "pkl:math"
import "pkl:platform"
import "pkl:semver"
import "pkl:shell"
import "pkl:xml"
import "pkl:yaml"

/// Parse JSON data using the JSON parser with list-based mapping.
///
/// If the data cannot be parsed as JSON, returns the raw string data.
/// If the input data is Base64-encoded, it will be automatically decoded before parsing.
/// [data]: The JSON string to parse.
/// Returns the parsed JSON data or the original string if parsing fails.
function jsonParser(data: String?) =
  if (data != null && data != "")
    let (decodedData = data)
    let (result = test.catchOrNull(() -> (new json.Parser { useMapping = true }).parse(decodedData)))
    if (result != null)
      result
    else
      let (result2 = test.catchOrNull(() -> (new json.Parser { useMapping = false }).parse(decodedData)))
      if (result2 != null)
        result2
      else
        decodedData
  else
    ""

/// Parse JSON data using the JSON parser with object-based mapping.
///
/// If the input data is Base64-encoded, it will be automatically decoded before parsing.
/// [data]: The JSON string to parse.
/// Returns the parsed JSON data as an object structure.
function jsonParserMapping(data: String?) =
  if (data != null)
    let (decodedData = data)
    let (result = test.catchOrNull(() -> (new json.Parser { useMapping = true }).parse(decodedData)))
    if (result != null)
      result
    else
      decodedData
  else
    ""

/// Renders a JSON document.
///
/// [value]: The value to render as a JSON document.
/// Returns the JSON representation of the value, or the original value if rendering fails.
function jsonRenderDocument(value: Any?) =
  if (value != null)
    let (result = test.catchOrNull(() -> (new JsonRenderer {}).renderDocument(value)))
    if (result != null) result else value
  else
    ""

/// Renders a JSON value.
///
/// [value]: The value to render as JSON.
/// Returns the JSON representation of the value, or the original value if rendering fails.
function jsonRenderValue(value: Any?) =
  if (value != null)
    let (result = test.catchOrNull(() -> (new JsonRenderer {}).renderValue(value)))
    if (result != null) result else value
  else
    ""

/// Renders a YAML document.
///
/// [value]: The value to render as a YAML document.
/// Returns the YAML representation of the value, or the original value if rendering fails.
function yamlRenderDocument(value: Any?) =
  if (value != null)
    let (result = test.catchOrNull(() -> (new YamlRenderer {}).renderDocument(value)))
    if (result != null) result else value
  else
    ""

/// Renders a YAML value.
///
/// [value]: The value to render as YAML.
/// Returns the YAML representation of the value, or the original value if rendering fails.
function yamlRenderValue(value: Any?) =
  if (value != null)
    let (result = test.catchOrNull(() -> (new YamlRenderer {}).renderValue(value)))
    if (result != null) result else value
  else
    ""

/// Renders an XML document.
///
/// [value]: The value to render as an XML document.
/// Returns the XML representation of the value, or the original value if rendering fails.
function xmlRenderDocument(value: Any?) =
  if (value != null)
    let (result = test.catchOrNull(() -> (new PListRenderer {}).renderDocument(value)))
    if (result != null) result else value
  else
    ""

/// Renders an XML value.
///
/// [value]: The value to render as XML.
/// Returns the XML representation of the value, or the original value if rendering fails.
function xmlRenderValue(value: Any?) =
  if (value != null)
    let (result = test.catchOrNull(() -> (new PListRenderer {}).renderValue(value)))
    if (result != null) result else value
  else
    ""
