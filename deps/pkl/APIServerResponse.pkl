/// Abstractions for Kdeps API Server Responses
///
/// This module provides the structure for handling API server responses in the Kdeps system.
/// It includes classes and variables for managing both successful and error responses.
///
/// **MEMORY-ONLY PROCESSING POLICY:**
/// - All responses are processed directly in memory
/// - No temporary PKL files are created during response processing
/// - Intermediate responses are stored in memory until the target action is reached
/// - Only the final target action response is written to disk for API consumers
///
/// This memory-first approach improves performance and reduces filesystem I/O overhead.
///
/// The module defines:
/// - [APIServerResponseBlock]: For handling data returned in a successful response.
/// - [APIServerErrorsBlock]: For managing error information in a failed API request.
/// - [Success]: A flag indicating the success or failure of the API request.
/// - [Errors]: The error block containing details of the error if the request was unsuccessful.
/// 
/// **DEPRECATED FEATURES:**
/// - File-based response processing has been deprecated in favor of memory-only processing
@go.Package { name = "github.com/kdeps/schema/gen/api_server_response" }

open module org.kdeps.pkl.APIServerResponse

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"

import "pkl:json"
import "pkl:test"
import "pkl:math"
import "pkl:platform"
import "pkl:semver"
import "pkl:shell"
import "pkl:xml"
import "pkl:yaml"
import "Document.pkl" as document
import "Utils.pkl" as utils

/// Class representing a block of data returned in a successful API response.
class APIServerResponseBlock {
        /// The data returned by the API server, stored as a listing of arbitrary items.
        Data: Listing<Any>
}

/// Contains metadata related to an API response.
///
/// This block includes essential details such as the request ID, response headers,
/// and custom properties, providing additional context for API interactions.
class APIServerResponseMetaBlock {
        /// A unique identifier (UUID) for the request.
        ///
        /// This ID helps track and correlate API requests.
        RequestID: String?

        /// HTTP headers included in the API response.
        ///
        /// Contains key-value pairs representing response headers.
        Headers: Mapping<String, String>?

        /// Custom key-value properties included in the JSON response.
        ///
        /// Used to store additional metadata or context-specific details.
        Properties: Mapping<String, String>?
}

/// Class representing error details returned in an API response when an error occurs.
class APIServerErrorsBlock {
        /// The error code returned by the API server, typically an HTTP status code.
        Code: Int
        /// A descriptive message explaining the error.
        Message: String
}

/// A Boolean flag indicating whether the API request was successful.
///
/// - `true`: The request was successful.
/// - `false`: The request encountered an error.
Success: Boolean? = true

/// Additional metadata related to the API request.
///
/// Provides request-specific details such as headers, properties, and tracking information.
Meta: APIServerResponseMetaBlock?

/// The response block containing data returned by the API server in a successful request, if any.
///
/// If the request was successful, this block contains the data associated with the response.
/// [APIServerResponseBlock]: Contains a listing of the returned data items.
Response: APIServerResponseBlock?

/// The error block containing details of any error encountered during the API request.
///
/// If the request was unsuccessful, this block contains the error code and error message
/// returned by the server.
/// [APIServerErrorsBlock]: Contains the error code and message explaining the issue.
Errors: Listing<APIServerErrorsBlock>?
