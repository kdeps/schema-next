/// This module defines the settings and configurations for HTTP client
/// resources within the KDEPS framework. It enables the management of
/// HTTP requests, including method specifications, request data, headers,
/// and handling of responses. This module provides functionalities to
/// retrieve and manage HTTP client resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/http" }

open module org.kdeps.pkl.HTTP

// Package imports
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"

// PKL standard library imports
import "pkl:json"
import "pkl:test"

// Local module imports
import "Agent.pkl" as agent
import "Common.pkl" as common
import "Core.pkl" as core
import "PklResource.pkl" as pklres
import "Utils.pkl" as utils
import "Validation.pkl" as validation

// Use common.safeGetValue instead of local implementation

/// Class representing an HTTP client resource, which includes details
/// about the HTTP method, URL, request data, headers, and response.
class ResourceHTTPClient {
        /// Function to check if a given HTTP method is valid using standardized validation.
        hidden isValidHTTPMethod = (str) -> validation.isValidHttpMethod(str)

        /// The HTTP method to be used for the request.
        Method: String(isValidHTTPMethod)

        /// The URL to which the request will be sent.
        Url: Uri?

        /// Optional data to be sent with the request.
        Data: Listing<String>?

        /// A mapping of headers to be included in the request.
        Headers: Mapping<String, String?>?

        /// A mapping of parameters to be included in the request.
        Params: Mapping<String, String?>?

        /// The response received from the HTTP request.
        Response: ResponseBlock?

        /// The file path where the response body value of this resource is saved
        File: String?

        /// The listing of the item iteration results
        ItemValues: Listing<String>?

        /// A timestamp of when the request was made, represented as an unsigned 64-bit integer.
        Timestamp: Duration?

        /// The timeout duration (in seconds) for the HTTP request. Defaults to 60 seconds.
        TimeoutDuration: Duration? = 60.s
}

/// Class representing the response block of an HTTP request.
/// It contains the body and headers of the response.
class ResponseBlock {
        /// The body of the response.
        Body: String?

        /// A mapping of response headers.
        Headers: Mapping<String, String>?
}

/// Retrieves the [ResourceHTTPClient] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceHTTPClient] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceHTTPClient]: The [ResourceHTTPClient] object associated with the resource actionID.
function resource(actionID: String?): ResourceHTTPClient =
  if (actionID != null)
    let (resolvedID = agent.resolveActionID(actionID))
    let (method = common.safeGetValue(resolvedID, "method"))
    let (url = common.safeGetValue(resolvedID, "url"))
    let (response = common.safeGetValue(resolvedID, "response"))
    let (file = common.safeGetValue(resolvedID, "file"))
    let (timeoutDuration = common.safeGetValue(resolvedID, "timeoutDuration"))
    let (timestamp = common.safeGetValue(resolvedID, "timestamp"))
    
    new ResourceHTTPClient {
        Method = if (method != "") method else "GET"
        Url = if (url != "") url else null
        Response = if (response != "") parseResponseFromJson(core.parseJsonOrNull(response)) else null
        File = if (file != "") file else null
        TimeoutDuration = if (timeoutDuration != "") timeoutDuration.toDuration() else 60.s
        Timestamp = if (timestamp != "") timestamp.toDuration() else null
        Data = new Listing<String> {}
        Headers = new Mapping<String, String> {}
        Params = new Mapping<String, String> {}
        ItemValues = new Listing<String> {}
    }
  else
    // Return default ResourceHTTPClient for null actionID
    new ResourceHTTPClient {}

/// Retrieves the body of the response associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response body for.
/// [str]: The body of the response from the HTTP request.
function responseBody(actionID: String?): String? = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "response"))
        if (res != "")
            res
        else null
    else null

/// Retrieves the file path containing the response body associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response body for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String? = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "file"))
        if (res != "")
            res
        else null
    else null

/// Retrieves the item iteration responses for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
/// [Listing<String>]: A listing of expected item iteration output.
function itemValues(actionID: String?): Listing<String> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "itemValues"))
        if (res != "")
            let (parsed = core.parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<String> else new Listing<String> {}
        else new Listing<String> {}
    else new Listing<String> {}

/// Retrieves the specified response header associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response header for.
/// [headerName]: The name of the header to retrieve.
/// [str]: The value of the specified response header, or an empty string if not found.
function responseHeader(actionID: String?, headerName: String?): String =
  if (actionID != null && headerName != null)
    let (resolvedID = agent.resolveActionID(actionID))
    let (responseData = common.safeGetValue(resolvedID, "response"))
    if (responseData != "")
        let (responseMap = core.parseJsonOrNull(responseData))
        if (responseMap != null && responseMap is Mapping<String, Any>)
            let (responseMapping = responseMap as Mapping<String, Any>)
            let (headers = responseMapping.getOrNull("Headers"))
            if (headers != null && headers is Mapping<String, String>)
                let (headersMapping = headers as Mapping<String, String>)
                let (headerValue = headersMapping.getOrNull(headerName))
                if (headerValue != null)
                    headerValue
                else ""
            else ""
        else ""
    else ""
  else ""

/// Retrieves the method associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the method for.
/// [str]: The HTTP method.
function method(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "method"))
        if (res != "") res else "GET"
    else "GET"

/// Retrieves the URL associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the URL for.
/// [str]: The URL.
function url(actionID: String?): String? = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "url"))
        if (res != "") res else null
    else null

/// Retrieves the timeout duration associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timeout for.
/// [Duration]: The timeout duration.
function timeoutDuration(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "timeoutDuration"))
        if (res != "") res.toDuration() else 60.s
    else 60.s

/// Retrieves the timestamp associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timestamp for.
/// [Duration]: The timestamp.
function timestamp(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = common.safeGetValue(resolvedID, "timestamp"))
        if (res != "") res.toDuration() else 0.s
    else 0.s

/// Helper function to parse ResponseBlock from JSON
function parseResponseFromJson(responseData: Any?): ResponseBlock? =
    if (responseData != null && responseData is Mapping)
        let (responseMap = responseData as Mapping<String, Any>)
        new ResponseBlock {
            Body = let (body = responseMap.getOrNull("Body")) if (body is String) body else null
            Headers = let (headers = responseMap.getOrNull("Headers")) if (headers is Mapping<String, String>) headers else null
        }
    else
        null


/// Retrieves HTTP resources with filtering using relational algebra
/// Uses cached select operations for better performance
///
/// [field]: The field to filter on
/// [operator]: The comparison operator ("eq", "ne", "gt", "lt", "gte", "lte", "contains", "in")
/// [value]: The value to compare against
/// [Mapping<String, String>]: The filtered HTTP resources
function getFilteredResources(field: String?, operator: String?, value: Dynamic): Mapping<String, String> =
    if (field != null && operator != null)
        let (condition = new pklres.SelectionCondition {
            field = field
            operator = operator
            value = value
        })
        let (selection = pklres.select("http", new Listing<pklres.SelectionCondition> { condition }))
        if (selection != null && selection.rows != null)
            new Mapping<String, String> {
                for (row in selection.rows) {
                    when (row.data.containsKey("key") && row.data.containsKey("value")) {
                        [row.data["key"].toString()] = row.data["value"].toString()
                    }
                }
            }
        else new Mapping<String, String> {}
    else new Mapping<String, String> {}

/// Retrieves HTTP resources by method using relational algebra
/// Uses cached select operations for better performance
///
/// [httpMethod]: The HTTP method to filter by
/// [Mapping<String, String>]: The HTTP resources with the specified method
function getResourcesByMethod(httpMethod: String?): Mapping<String, String> =
    if (httpMethod != null)
        getFilteredResources("method", "eq", httpMethod)
    else new Mapping<String, String> {}

/// Retrieves HTTP resources by status code using relational algebra
/// Uses cached select operations for better performance
///
/// [statusCode]: The status code to filter by
/// [Mapping<String, String>]: The HTTP resources with the specified status code
function getResourcesByStatusCode(statusCode: Dynamic): Mapping<String, String> =
    if (statusCode != null)
        getFilteredResources("statusCode", "eq", statusCode)
    else new Mapping<String, String> {}

/// Retrieves HTTP resources by URL pattern using relational algebra
/// Uses cached select operations with contains operator
///
/// [urlPattern]: The URL pattern to search for
/// [Mapping<String, String>]: The HTTP resources matching the URL pattern
function getResourcesByUrlPattern(urlPattern: String?): Mapping<String, String> =
    if (urlPattern != null)
        getFilteredResources("url", "contains", urlPattern)
    else new Mapping<String, String> {}

/// Retrieves HTTP resources by timestamp range using relational algebra
/// Uses cached select operations for time-based filtering
///
/// [startTime]: Start timestamp
/// [endTime]: End timestamp
/// [Mapping<String, String>]: The HTTP resources in the time range
function getResourcesByTimeRange(startTime: Dynamic, endTime: Dynamic): Mapping<String, String> =
    if (startTime != null && endTime != null)
        let (selectionConditions = new Listing<pklres.SelectionCondition> {
            new pklres.SelectionCondition {
                field = "timestamp"
                operator = "gte"
                value = startTime
            }
            new pklres.SelectionCondition {
                field = "timestamp"
                operator = "lte"
                value = endTime
            }
        })
        let (selection = pklres.select("http", selectionConditions))
        if (selection != null && selection.rows != null)
            new Mapping<String, String> {
                for (row in selection.rows) {
                    when (row.data.containsKey("key") && row.data.containsKey("value")) {
                        [row.data["key"].toString()] = row.data["value"].toString()
                    }
                }
            }
        else new Mapping<String, String> {}
    else new Mapping<String, String> {}

/// Retrieves specific fields from HTTP resources using relational algebra
/// Uses cached project operations for better performance
///
/// [fields]: List of fields to include
/// [Mapping<String, String>]: The projected HTTP resources
function getResourceFields(fields: Listing<String>): Mapping<String, String> =
    if (fields != null)
        let (condition = new pklres.ProjectionCondition {
            columns = fields
        })
        let (projection = pklres.project("http", condition))
        if (projection != null && projection.rows != null)
            new Mapping<String, String> {
                for (row in projection.rows) {
                    for (field in fields) {
                        when (row.data.containsKey(field)) {
                            [field] = row.data[field].toString()
                        }
                    }
                }
            }
        else new Mapping<String, String> {}
    else new Mapping<String, String> {}

/// Joins HTTP resources with another collection using relational algebra
/// Uses cached join operations for better performance
///
/// [otherCollection]: The other collection to join with
/// [httpKey]: The key field in HTTP resources
/// [otherKey]: The key field in the other collection
/// [joinType]: The type of join ("inner", "left", "right", "full")
/// [Mapping<String, String>]: The joined resources
function joinWithCollection(otherCollection: String?, httpKey: String?, otherKey: String?, joinType: String?): Mapping<String, String> =
    if (otherCollection != null && httpKey != null && otherKey != null && joinType != null)
        let (condition = new pklres.JoinCondition {
            leftCollection = "http"
            rightCollection = otherCollection
            leftKey = httpKey
            rightKey = otherKey
            joinType = joinType
        })
        let (join = pklres.join(condition))
        if (join != null && join.rows != null)
            new Mapping<String, String> {
                for (row in join.rows) {
                    for (field in row.data.keys) {
                        [field] = row.data[field].toString()
                    }
                }
            }
        else new Mapping<String, String> {}
    else new Mapping<String, String> {}


/// Clears the query cache for HTTP operations
function clearCache(): String = pklres.clearCache()

/// Sets the cache TTL for HTTP query caching
/// [ttlSeconds]: Time to live in seconds
function setCacheTTL(ttlSeconds: Int): String = pklres.setCacheTTL(ttlSeconds)

/// Gets cache statistics for HTTP operations
function getCacheStats(): Dynamic = pklres.getCacheStats()

/// Performs a cached HTTP query with automatic caching
/// [queryType]: Type of query ("select", "project", "join")
/// [params]: Query parameters
function queryWithCache(queryType: String?, params: Dynamic): Dynamic = pklres.queryWithCache(queryType, params)
