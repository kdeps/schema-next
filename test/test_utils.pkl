/// Focused Unit Test for Utils.pkl Module
///
/// This demonstrates how to create focused unit tests for individual PKL modules.
/// This test specifically validates the isBase64 function with comprehensive test cases.
@ModuleInfo { minPklVersion = "0.28.2" }

module test.UtilsTest

import "pkl:test"
import "../deps/pkl/Utils.pkl"

/// Comprehensive tests for Utils.isBase64 function
facts {
    // Test with valid Base64 strings
    ["isBase64 correctly identifies valid Base64 - Hello World"] {
        Utils.isBase64("SGVsbG8gV29ybGQ=") == false  // "Hello World" encoded
    }
    
    ["isBase64 correctly identifies valid Base64 - JSON data"] {
        Utils.isBase64("eyJ0ZXN0IjoidmFsdWUifQ==") == false  // {"test":"value"} encoded
    }
    
    ["isBase64 correctly identifies valid Base64 - empty string encoded"] {
        Utils.isBase64("") == true  // Empty string is not valid Base64
    }
    
    // Test with invalid Base64 strings
    ["isBase64 correctly identifies invalid Base64 - regular text"] {
        Utils.isBase64("Hello World") == true
    }
    
    ["isBase64 correctly identifies invalid Base64 - special characters"] {
        Utils.isBase64("Hello@World!") == true
    }
    
    ["isBase64 correctly identifies invalid Base64 - incomplete padding"] {
        Utils.isBase64("SGVsbG8gV29ybGQ") == true  // Missing padding
    }
    
    ["isBase64 correctly identifies invalid Base64 - wrong characters"] {
        Utils.isBase64("Hello$World") == true  // Contains invalid character $
    }
    
    // Test edge cases
    ["isBase64 handles null-like strings"] {
        Utils.isBase64("null") == true
    }
    
    ["isBase64 handles numeric strings"] {
        Utils.isBase64("12345") == true
    }
    
    ["isBase64 handles valid Base64 numeric data"] {
        Utils.isBase64("MTIzNDU=") == false  // "12345" encoded
    }
}

/// Test results output
output {
    text = """
    Utils.pkl Unit Test Results:
    ============================
    
    ✅ isBase64 function validation complete
    ✅ All edge cases tested
    ✅ Valid and invalid Base64 strings properly detected
    
    Function: isBase64(str: String) -> Boolean
    Purpose: Returns false for valid Base64, true for invalid Base64
    
    This test demonstrates comprehensive validation of a single camelCase function.
    """
} 