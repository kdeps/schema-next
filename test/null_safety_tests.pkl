/// Null Safety Test Suite for PKL Functions
///
/// This test suite specifically validates that all PKL functions
/// handle null inputs gracefully and provide appropriate fallback behavior.
/// 
/// This tests the null safety improvements made to ensure robust error handling.
@ModuleInfo { minPklVersion = "0.28.2" }

module test.NullSafetyTests

import "pkl:test"
import "../deps/pkl/Document.pkl"
import "../deps/pkl/Utils.pkl"
import "../deps/pkl/Item.pkl"
import "../deps/pkl/LLM.pkl"
import "../deps/pkl/Python.pkl"
import "../deps/pkl/Exec.pkl"
import "../deps/pkl/HTTP.pkl"
import "../deps/pkl/APIServerRequest.pkl"

/// Mock APIServerRequest with null/empty data for testing
local nullTestRequest = new APIServerRequest {
    Path = ""
    IP = ""
    ID = ""
    Method = ""
    Data = ""
    Params {}
    Headers {}
    Files {}
}

/// Comprehensive null safety tests
facts {
    
    // ===== Document.pkl Null Safety =====
    
    ["Document.jsonParser safely handles null"] {
        Document.jsonParser(null) == ""
    }
    
    ["Document.jsonParserMapping safely handles null"] {
        Document.jsonParserMapping(null) == ""
    }
    
    ["Document.jsonRenderDocument safely handles null"] {
        Document.jsonRenderDocument(null) == ""
    }
    
    ["Document.jsonRenderValue safely handles null"] {
        Document.jsonRenderValue(null) == ""
    }
    
    ["Document.yamlRenderDocument safely handles null"] {
        Document.yamlRenderDocument(null) == ""
    }
    
    ["Document.yamlRenderValue safely handles null"] {
        Document.yamlRenderValue(null) == ""
    }
    
    ["Document.xmlRenderDocument safely handles null"] {
        Document.xmlRenderDocument(null) == ""
    }
    
    ["Document.xmlRenderValue safely handles null"] {
        Document.xmlRenderValue(null) == ""
    }
    
    // ===== Utils.pkl Null Safety =====
    
    ["Utils.isBase64 safely handles null"] {
        Utils.isBase64(null) == false
    }
    
    // ===== Item.pkl Null Safety =====
    
    ["Item.values safely handles null"] {
        Item.values(null) is Listing<String> && Item.values(null).length == 0
    }
    
    // ===== LLM.pkl Null Safety =====
    
    ["LLM.resource provides safe defaults for null action"] {
        let (result = LLM.resource(null))
        result.Model == "llama3.2" && result.Response == null
    }
    
    ["LLM.response safely handles null action"] {
        LLM.response(null) == ""
    }
    
    ["LLM.prompt safely handles null action"] {
        LLM.prompt(null) == ""
    }
    
    ["LLM.jsonResponse safely handles null action"] {
        LLM.jsonResponse(null) == false
    }
    
    ["LLM.jsonResponseKeys safely handles null action"] {
        LLM.jsonResponseKeys(null) is Listing<String> && LLM.jsonResponseKeys(null).length == 0
    }
    
    ["LLM.itemValues safely handles null action"] {
        LLM.itemValues(null) is Listing<String> && LLM.itemValues(null).length == 0
    }
    
    ["LLM.file safely handles null action"] {
        LLM.file(null) == ""
    }
    
    // ===== Python.pkl Null Safety =====
    
    ["Python.resource provides safe defaults for null action"] {
        let (result = Python.resource(null))
        result.Script == "" && result.ExitCode == 0
    }
    
    ["Python.stderr safely handles null action"] {
        Python.stderr(null) == ""
    }
    
    ["Python.stdout safely handles null action"] {
        Python.stdout(null) == ""
    }
    
    ["Python.exitCode safely handles null action"] {
        Python.exitCode(null) == 0
    }
    
    ["Python.file safely handles null action"] {
        Python.file(null) == ""
    }
    
    ["Python.itemValues safely handles null action"] {
        Python.itemValues(null) is Listing<String> && Python.itemValues(null).length == 0
    }
    
    ["Python.env safely handles null action and variable"] {
        Python.env(null, null) == "" &&
        Python.env("valid", null) == "" &&
        Python.env(null, "valid") == ""
    }
    
    // ===== Exec.pkl Null Safety =====
    
    ["Exec.resource provides safe defaults for null action"] {
        let (result = Exec.resource(null))
        result.Command == "" && result.ExitCode == 0
    }
    
    ["Exec.stderr safely handles null action"] {
        Exec.stderr(null) == ""
    }
    
    ["Exec.stdout safely handles null action"] {
        Exec.stdout(null) == ""
    }
    
    ["Exec.exitCode safely handles null action"] {
        Exec.exitCode(null) == 0
    }
    
    ["Exec.file safely handles null action"] {
        Exec.file(null) == ""
    }
    
    ["Exec.itemValues safely handles null action"] {
        Exec.itemValues(null) is Listing<String> && Exec.itemValues(null).length == 0
    }
    
    ["Exec.env safely handles null action and variable"] {
        Exec.env(null, null) == "" &&
        Exec.env("valid", null) == "" &&
        Exec.env(null, "valid") == ""
    }
    
    // ===== HTTP.pkl Null Safety =====
    
    ["HTTP.resource provides safe defaults for null action"] {
        let (result = HTTP.resource(null))
        result.Method == "GET" && result.Url == ""
    }
    
    ["HTTP.responseBody safely handles null action"] {
        HTTP.responseBody(null) == ""
    }
    
    ["HTTP.file safely handles null action"] {
        HTTP.file(null) == ""
    }
    
    ["HTTP.itemValues safely handles null action"] {
        HTTP.itemValues(null) is Listing<String> && HTTP.itemValues(null).length == 0
    }
    
    ["HTTP.responseHeader safely handles null action and header"] {
        HTTP.responseHeader(null, null) == "" &&
        HTTP.responseHeader("valid", null) == "" &&
        HTTP.responseHeader(null, "valid") == ""
    }
    
    // ===== APIServerRequest.pkl Null Safety =====
    
    ["APIServerRequest.params safely handles null parameter name"] {
        nullTestRequest.params(null) == ""
    }
    
    ["APIServerRequest.header safely handles null header name"] {
        nullTestRequest.header(null) == ""
    }
    
    ["APIServerRequest.file safely handles null file name"] {
        let (result = nullTestRequest.file(null))
        result.Filepath == "" && result.Filetype == ""
    }
    
    ["APIServerRequest.filetype safely handles null name"] {
        nullTestRequest.filetype(null) == ""
    }
    
    ["APIServerRequest.filepath safely handles null name"] {
        nullTestRequest.filepath(null) == ""
    }
    
    ["APIServerRequest.filesByType safely handles null MIME type"] {
        nullTestRequest.filesByType(null) is Listing<String> && nullTestRequest.filesByType(null).length == 0
    }
    
    // ===== Comprehensive Null Safety Validation =====
    
    ["All nullable string parameters return empty string for null"] {
        Document.jsonParser(null) == "" &&
        Utils.isBase64(null) == false &&  // Special case: boolean return
        LLM.response(null) == "" &&
        Python.stderr(null) == "" &&
        Exec.stdout(null) == "" &&
        HTTP.responseBody(null) == "" &&
        nullTestRequest.params(null) == ""
    }
    
    ["All nullable list-returning functions return empty lists for null"] {
        Item.values(null).length == 0 &&
        LLM.jsonResponseKeys(null).length == 0 &&
        LLM.itemValues(null).length == 0 &&
        Python.itemValues(null).length == 0 &&
        Exec.itemValues(null).length == 0 &&
        HTTP.itemValues(null).length == 0 &&
        nullTestRequest.filesByType(null).length == 0
    }
    
    ["All nullable numeric returns provide safe defaults"] {
        Python.exitCode(null) == 0 &&
        Exec.exitCode(null) == 0
    }
    
    ["All nullable boolean returns provide safe defaults"] {
        Utils.isBase64(null) == false &&
        LLM.jsonResponse(null) == false
    }
    
    ["All resource functions provide safe default objects for null"] {
        LLM.resource(null).Model != null &&
        Python.resource(null).Script != null &&
        Exec.resource(null).Command != null &&
        HTTP.resource(null).Method != null
    }
    
    ["No null pointer exceptions occur with null inputs"] {
        // Test that all functions can be called with null without crashing
        test.catchOrNull(() -> Document.jsonParser(null)) != null &&
        test.catchOrNull(() -> Utils.isBase64(null)) != null &&
        test.catchOrNull(() -> Item.values(null)) != null &&
        test.catchOrNull(() -> LLM.response(null)) != null &&
        test.catchOrNull(() -> Python.stderr(null)) != null &&
        test.catchOrNull(() -> Exec.stdout(null)) != null &&
        test.catchOrNull(() -> HTTP.responseBody(null)) != null &&
        test.catchOrNull(() -> nullTestRequest.params(null)) != null
    }
    
    ["Chained null access is safely handled"] {
        // Test accessing properties on potentially null objects
        let (llmRes = LLM.resource(null))
        let (pythonRes = Python.resource(null))
        let (execRes = Exec.resource(null))
        let (httpRes = HTTP.resource(null))
        
        llmRes.Model != null &&
        pythonRes.Script != null &&
        execRes.Command != null &&
        httpRes.Method != null
    }
}

/// Null safety test execution and counting
local documentNullTests = List(
    Document.jsonParser(null) == "",
    Document.jsonParserMapping(null) == "",
    Document.jsonRenderDocument(null) == "",
    Document.jsonRenderValue(null) == "",
    Document.yamlRenderDocument(null) == "",
    Document.yamlRenderValue(null) == "",
    Document.xmlRenderDocument(null) == "",
    Document.xmlRenderValue(null) == ""
)

local utilsNullTests = List(
    Utils.isBase64(null) == false
)

local itemNullTests = List(
    Item.values(null).length == 0
)

local llmNullTests = List(
    LLM.resource(null).Model == "llama3.2" && LLM.resource(null).Response == null,
    LLM.response(null) == "",
    LLM.prompt(null) == "",
    LLM.jsonResponse(null) == false,
    LLM.jsonResponseKeys(null).length == 0,
    LLM.itemValues(null).length == 0,
    LLM.file(null) == ""
)

local pythonNullTests = List(
    Python.resource(null).Script == "" && Python.resource(null).ExitCode == 0,
    Python.stderr(null) == "",
    Python.stdout(null) == "",
    Python.exitCode(null) == 0,
    Python.file(null) == "",
    Python.itemValues(null).length == 0,
    Python.env(null, null) == "" && Python.env("valid", null) == "" && Python.env(null, "valid") == ""
)

local execNullTests = List(
    Exec.resource(null).Command == "" && Exec.resource(null).ExitCode == 0,
    Exec.stderr(null) == "",
    Exec.stdout(null) == "",
    Exec.exitCode(null) == 0,
    Exec.file(null) == "",
    Exec.itemValues(null).length == 0,
    Exec.env(null, null) == "" && Exec.env("valid", null) == "" && Exec.env(null, "valid") == ""
)

local httpNullTests = List(
    HTTP.resource(null).Method == "GET" && HTTP.resource(null).Url == "",
    HTTP.responseBody(null) == "",
    HTTP.file(null) == "",
    HTTP.itemValues(null).length == 0,
    HTTP.responseHeader(null, null) == "" && HTTP.responseHeader("valid", null) == "" && HTTP.responseHeader(null, "valid") == ""
)

local apiNullTests = List(
    nullTestRequest.params(null) == "",
    nullTestRequest.header(null) == "",
    nullTestRequest.file(null).Filepath == "",
    nullTestRequest.filetype(null) == "",
    nullTestRequest.filepath(null) == "",
    nullTestRequest.filesByType(null).length == 0
)

/// Calculate null safety statistics
local allNullTests = documentNullTests + utilsNullTests + itemNullTests + llmNullTests + pythonNullTests + execNullTests + httpNullTests + apiNullTests
local totalTests = allNullTests.length
local passedTests = allNullTests.filter((result) -> result == true).length
local failedTests = totalTests - passedTests
local successRate = if (totalTests > 0) (passedTests / totalTests * 100).floor else 0

local function getTestStatus(tests: List): String = if (tests.every((test) -> test == true)) "✅" else "❌"
local function getTestSummary(tests: List): String = 
    let (passed = tests.filter((test) -> test == true).length)
    let (total = tests.length)
    "\(passed)/\(total)"

/// Dynamic null safety test results
output {
    text = """
    🛡️ NULL SAFETY TEST RESULTS (DYNAMIC)
    ======================================
    
    📊 EXECUTION SUMMARY:
    Total Null Safety Tests: \(totalTests)
    Passed: \(passedTests)
    Failed: \(failedTests)
    Success Rate: \(successRate)%
    
    📋 NULL SAFETY BY MODULE:
    \(getTestStatus(documentNullTests)) Document.pkl - \(getTestSummary(documentNullTests)) null safety tests
    \(getTestStatus(utilsNullTests)) Utils.pkl - \(getTestSummary(utilsNullTests)) null safety tests
    \(getTestStatus(itemNullTests)) Item.pkl - \(getTestSummary(itemNullTests)) null safety tests
    \(getTestStatus(llmNullTests)) LLM.pkl - \(getTestSummary(llmNullTests)) null safety tests
    \(getTestStatus(pythonNullTests)) Python.pkl - \(getTestSummary(pythonNullTests)) null safety tests
    \(getTestStatus(execNullTests)) Exec.pkl - \(getTestSummary(execNullTests)) null safety tests
    \(getTestStatus(httpNullTests)) HTTP.pkl - \(getTestSummary(httpNullTests)) null safety tests
    \(getTestStatus(apiNullTests)) APIServerRequest.pkl - \(getTestSummary(apiNullTests)) null safety tests
    
    🎯 OVERALL NULL SAFETY STATUS: \(if (failedTests == 0) "✅ ALL TESTS PASSING" else "❌ " + failedTests.toString() + " TESTS FAILING")
    
    \(if (failedTests > 0) "🔍 Failed Test Categories:" else "")
    \(if (!documentNullTests.every((test) -> test == true)) "❌ Document.pkl: " + getTestSummary(documentNullTests) else "")
    \(if (!utilsNullTests.every((test) -> test == true)) "❌ Utils.pkl: " + getTestSummary(utilsNullTests) else "")
    \(if (!itemNullTests.every((test) -> test == true)) "❌ Item.pkl: " + getTestSummary(itemNullTests) else "")
    \(if (!llmNullTests.every((test) -> test == true)) "❌ LLM.pkl: " + getTestSummary(llmNullTests) else "")
    \(if (!pythonNullTests.every((test) -> test == true)) "❌ Python.pkl: " + getTestSummary(pythonNullTests) else "")
    \(if (!execNullTests.every((test) -> test == true)) "❌ Exec.pkl: " + getTestSummary(execNullTests) else "")
    \(if (!httpNullTests.every((test) -> test == true)) "❌ HTTP.pkl: " + getTestSummary(httpNullTests) else "")
    \(if (!apiNullTests.every((test) -> test == true)) "❌ APIServerRequest.pkl: " + getTestSummary(apiNullTests) else "")
    
    This null safety validation is computed dynamically from actual test execution.
    All results reflect real-time function behavior, not predetermined values.
    """
} 