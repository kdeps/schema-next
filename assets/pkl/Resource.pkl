/// Abstractions for Kdeps Resources
///
/// This module defines the structure for resources used within the Kdeps framework,
/// including actions that can be performed on these resources, validation checks,
/// and error handling mechanisms. Each resource can define its actionID, name, description,
/// category, dependencies, and how it runs.
///
/// **MEMORY-ONLY PROCESSING POLICY:**
/// - All resource processing is done in-memory to maximize performance
/// - No temporary files are created during resource execution
/// - APIResponse blocks are processed directly in memory and stored for later use
/// - Only the final target action response is persisted to disk
/// - Intermediate resource responses remain in memory-only storage
///
/// **EXECUTION FLOW:**
/// - Resources execute in dependency order until the target action is reached
/// - Each resource with APIResponse stores its response in memory
/// - Processing continues beyond intermediate response resources
/// - Only when TargetActionID is reached does the workflow terminate
/// - This allows for complex multi-step workflows with intermediate API responses
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/resource" }

open module org.kdeps.pkl.Resource

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"

import "pkl:json"
import "pkl:test"
import "pkl:math"
import "pkl:platform"
import "pkl:semver"
import "pkl:shell"
import "pkl:xml"
import "pkl:yaml"

import "Document.pkl" as document
import "Utils.pkl" as utils
import "Memory.pkl" as memory
import "Session.pkl" as session
import "Tool.pkl" as tool
import "Item.pkl" as item

import "LLM.pkl" as llm
import "Agent.pkl" as agent
import "Python.pkl" as python
import "Exec.pkl" as exec
import "HTTP.pkl" as client
import "APIServerRequest.pkl" as request

import "Project.pkl"
import "APIServer.pkl"
import "APIServerResponse.pkl"

/// Regex pattern for validating resource actionIDs and dependencies.
hidden actionStringRegex = Regex(#"^(\w+|@\w+(/[\w-]+)(:[\w.]+)?)$"#)

/// Validates the resource actionID according to the specified regex pattern.
///
/// Throws an error if the resource actionID contains invalid characters.
///
/// [str]: The resource actionID to validate.
hidden isValidActionID = (str) -> if (str.matches(actionStringRegex)) true else throw("Error: Invalid id name: The id contains invalid characters. Please ensure it only includes alphanumeric characters (letters and numbers) and is not empty.")

/// Validates the dependency actionID according to the specified regex pattern.
///
/// Throws an error if the dependency actionID contains invalid characters.
///
/// [str]: The dependency actionID to validate.
hidden isValidDependency = (str) -> if (str.matches(actionStringRegex)) true else throw("Action must be either a simple alphanumeric string or start with `@`, followed by `/action` and an optional `:version` (e.g., `@agent/action:1.0.0`).")

/// The unique identifier for the resource, validated against [isValidActionID].
ActionID: String(isValidActionID)

/// The name of the resource.
Name: String?

/// A description of the resource, providing additional context.
Description: String?

/// The category to which the resource belongs.
Category: String?

/// A listing of dependencies required by the resource, validated against [isValidDependency].
Requires: Listing<String(isValidDependency)>?

/// Defines the action items to be processed individually in a loop.
Items: Listing<String>?

/// Defines the action to be taken for the resource.
Run: ResourceAction

/// Class representing an action that can be executed on a resource.
class ResourceAction {
        /// Block for performing PKL expressions.
        Expr: Dynamic?

        /// Configuration for executing commands.
        Exec: exec.ResourceExec?

        /// Configuration for python scripts.
        Python: python.ResourcePython?

        /// Configuration for chat interactions with an LLM.
        Chat: llm.ResourceChat?

        /// A listing of conditions that determine if the action should be skipped.
        SkipCondition: Listing<Any>?

        /// A pre-flight validation check to be performed before executing the action.
        PreflightCheck: ValidationCheck?

        /// A post-flight validation check to be performed after executing the action.
        PostflightCheck: ValidationCheck?

        /// A listing of allowed HTTP headers
        AllowedHeaders: Listing<String>?

        /// A listing of allowed HTTP params
        AllowedParams: Listing<String>?

        /// A listing of targeted HTTP methods
        RestrictToHTTPMethods: Listing<String>?

        /// A listing of targeted HTTP routes
        RestrictToRoutes: Listing<String>?

        /// Configuration for HTTP client interactions.
        HTTPClient: client.ResourceHTTPClient?

        /// Configuration for handling API responses.
        APIResponse: APIServerResponse?
}

/// Class representing validation checks that can be performed on actions.
class ValidationCheck {
        /// A listing of validation conditions.
        Validations: Listing<Any>?

        /// An error associated with the validation check, if any.
        Error: APIError?

        /// Boolean flag to enable or disable retry functionality for the validation check.
        ///
        /// - `true`: The validation check will be retried if it fails.
        /// - `false`: The validation check will not be retried. Default is `false`.
        Retry: Boolean? = false

        /// The number of times to retry the validation check before considering it a failure.
        ///
        /// This property is only used when [Retry] is set to `true`.
        /// Default value is 3 retry attempts.
        RetryTimes: Int? = 3
}

/// Class representing an error returned from an API validation check.
class APIError {
        /// The error code associated with the API error.
        Code: Int?

        /// A message providing details about the error.
        Message: String?
}
