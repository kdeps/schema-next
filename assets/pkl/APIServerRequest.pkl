/// Abstractions for KDEPS API Server Request handling
///
/// This module provides the structure for handling API server requests in the Kdeps system.
/// It includes classes and variables for managing request data such as paths, methods, headers,
/// query parameters, and uploaded files. It also provides functions for retrieving and processing
/// request information, including file uploads and metadata extraction.
///
/// This module is part of the `kdeps` schema and interacts with the API server to process incoming
/// requests.
///
/// The module defines:
/// - [APIServerRequestUploads]: For managing metadata of uploaded files.
/// - Functions for retrieving request data from the key-value store.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/api_server_request" }

open module org.kdeps.pkl.APIServerRequest

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri@1.0.3#/URI.pkl"
import "pkl:test"
import "pkl:json"
import "Core.pkl" as core
import "Agent.pkl" as agent

/// Regular expression for validating HTTP methods supported by the API server.
hidden apiMethodRegex = Regex(#"^(?i:(GET|POST|PUT|PATCH|OPTIONS|DELETE|HEAD))"#)

/// Validates if the provided HTTP method [str] is supported.
///
/// This function checks whether the given HTTP method matches the supported methods
/// defined in [apiMethodRegex]. If the method is invalid, it throws an error with
/// a descriptive message listing the supported methods.
///
/// Returns `true` if the method is valid; otherwise, throws an error with a descriptive message.
///
/// [str]: The HTTP method string to validate.
/// [bool]: True if the HTTP method is valid, otherwise throws an error with a descriptive message.
hidden isValidHTTPMethod = (str) -> if (str.matches(apiMethodRegex)) true else throw("Error: Invalid HTTP method. The provided HTTP method is not supported. Please use one of the following methods: GET, POST, PUT, PATCH, DELETE, OPTIONS, or HEAD.")

/// Helper function to parse JSON safely
function parseJsonOrNull(data: String?) =
  if (data != null && data != "" && data != "null")
    test.catchOrNull(() -> (new json.Parser { useMapping = true }).parse(data))
  else
    null

/// Helper function to safely read from pklres and return null if not available
function safeRead(uri: String?) =
  if (uri != null && uri != "")
    test.catchOrNull(() -> read(uri))
  else
    null

/// Class representing metadata for an uploaded file in an API request.
class APIServerRequestUploads {
    /// The file path where the uploaded file is stored on the server.
    Filepath: String

    /// The MIME type of the uploaded file.
    Filetype: String
}

/// Retrieves the request ID from the key-value store
/// Returns empty string if not found or if reader is not available
function requestID(): String =
  let (result = safeRead("pklres://?op=get&collection=current&key=requestID"))
  if (result != null)
    let (jsonText = result)
    if (jsonText != "null" && jsonText != "")
      let (parsed = parseJsonOrNull(jsonText))
      if (parsed != null)
        parsed.toString()
      else
        jsonText
    else
      ""
  else ""

/// Retrieves the request ID from the key-value store (alias for requestID)
/// Returns empty string if not found or if reader is not available
function id(): String = requestID()

/// Retrieves the request path from the key-value store
/// Returns empty string if not found or if reader is not available
function path(): String =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=path"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed != null)
          parsed.toString()
        else
          jsonText
      else
        ""
    else
      ""
  else ""

/// Retrieves the request method from the key-value store
/// Returns empty string if not found or if reader is not available
function method(): String =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=method"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed != null)
          parsed.toString()
        else
          jsonText
      else
        ""
    else
      ""
  else ""

/// Retrieves the decoded request body.
///
/// [str]: The Base64-decoded request body.
function data(): String =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=data"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed != null)
          parsed.toString()
        else
          jsonText
      else
        ""
    else
      ""
  else ""

/// Retrieves the decoded value of the query parameter [name].
///
/// If the parameter exists, its value is Base64-decoded and returned.
///
/// [name]: The query parameter to retrieve.
/// [str]: The Base64-decoded value of the query parameter.
function params(name: String?): String =
  let (reqID = requestID())
  let (params = if (name != null && reqID != null && reqID != "")
    safeRead("pklres://?op=get&collection=\(reqID)&key=params")
    else null)
  let (paramsMap = if (params != null)
    let  (jsonText = params)
    if (jsonText != "null" && jsonText != "")
      let (parsed = parseJsonOrNull(jsonText))
      if (parsed is Mapping<String, String>)
        parsed as Mapping<String, String>
      else
        new Mapping<String, String> {}
    else
      new Mapping<String, String> {}
    else new Mapping<String, String> {})
  let (paramValue = paramsMap.getOrNull(name))
  if (paramValue != null && paramValue != "")
    paramValue
  else ""

/// Retrieves the decoded value of the header [name].
///
/// If the header exists, its value is Base64-decoded and returned.
///
/// [name]: The header name to retrieve.
/// [str]: The Base64-decoded value of the header.
function header(name: String?): String =
  let (reqID = requestID())
  let (headers = if (name != null && reqID != null && reqID != "")
    safeRead("pklres://?op=get&collection=\(reqID)&key=headers")
    else null)
  let (headersMap = if (headers != null)
    let  (jsonText = headers)
    if (jsonText != "null" && jsonText != "")
      let (parsed = parseJsonOrNull(jsonText))
      if (parsed is Mapping<String, String>)
        parsed as Mapping<String, String>
      else
        new Mapping<String, String> {}
    else
      new Mapping<String, String> {}
    else new Mapping<String, String> {})
  let (headerValue = headersMap.getOrNull(name))
  if (headerValue != null && headerValue != "")
    headerValue
  else ""

/// Retrieves metadata for the uploaded file with the key [name].
///
/// If no file with the specified key exists, returns metadata for the first available file,
/// or returns an empty file metadata object if no files are uploaded.
///
/// [name]: The key of the file to retrieve.
/// [APIServerRequestUploads]: The metadata for the requested file.
function file(name: String?): APIServerRequestUploads =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=files"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed is Mapping<String, APIServerRequestUploads>)
          let (filesMap = parsed as Mapping<String, APIServerRequestUploads>)
          if (name != null)
            let (fileResult = filesMap.getOrNull(name))
            if (fileResult != null) fileResult else (if (!filesMap.isEmpty) filesMap.values.first() else new APIServerRequestUploads { Filepath = ""; Filetype = "" })
          else if (!filesMap.isEmpty)
            filesMap.values.first()
          else new APIServerRequestUploads { Filepath = ""; Filetype = "" }
        else
          new APIServerRequestUploads { Filepath = ""; Filetype = "" }
      else
        new APIServerRequestUploads { Filepath = ""; Filetype = "" }
    else
      new APIServerRequestUploads { Filepath = ""; Filetype = "" }
  else new APIServerRequestUploads { Filepath = ""; Filetype = "" }

/// Retrieves the MIME type of the uploaded file with the key [name].
///
/// [name]: The key of the file to retrieve the MIME type for.
/// [str]: The MIME type of the file.
function filetype(name: String?): String = file(name).Filetype

/// Retrieves the file path of the uploaded file with the key [name].
///
/// [name]: The key of the file to retrieve the file path for.
/// [str]: The file path of the file.
function filepath(name: String?): String = file(name).Filepath

/// Retrieves the total number of uploaded files.
///
/// [str]: The number of uploaded files as a string.
function filecount(): String =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=files"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed is Mapping<String, APIServerRequestUploads>)
          let (filesMap = parsed as Mapping<String, APIServerRequestUploads>)
          filesMap.length.toString()
        else
          "0"
      else
        "0"
    else
      "0"
  else "0"

/// Retrieves a list of file paths for all uploaded files.
///
/// [Listing]: A list of file paths for uploaded files.
function fileList(): Listing =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=files"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed is Mapping<String, APIServerRequestUploads>)
          let (filesMap = parsed as Mapping<String, APIServerRequestUploads>)
          filesMap.values.toList().map((it) -> it.Filepath)
        else
          new Listing {}
      else
        new Listing {}
    else
      new Listing {}
  else new Listing {}

/// Retrieves a list of MIME types for all uploaded files.
///
/// [Listing]: A list of MIME types for uploaded files.
function filetypes(): Listing =
  let (reqID = requestID())
  if (reqID != null && reqID != "")
    let (result = safeRead("pklres://?op=get&collection=\(reqID)&key=files"))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        let (parsed = parseJsonOrNull(jsonText))
        if (parsed is Mapping<String, APIServerRequestUploads>)
          let (filesMap = parsed as Mapping<String, APIServerRequestUploads>)
          filesMap.values.toList().map((it) -> it.Filetype)
        else
          new Listing {}
      else
        new Listing {}
    else
      new Listing {}
  else new Listing {}

/// Retrieves a list of file paths for uploaded files that match the given MIME type [mimeType].
///
/// [mimeType]: The MIME type to filter files by.
/// [Listing]: A list of file paths for files that match the specified MIME type.
function filesByType(mimeType: String?): Listing =
  let (reqID = requestID())
  let (result = if (mimeType != null && reqID != null && reqID != "")
    safeRead("pklres://?op=get&collection=\(reqID)&key=files")
    else null)
  let (filesMap = if (result != null)
    let (jsonText = result)
    if (jsonText != "null" && jsonText != "")
      let (parsed = parseJsonOrNull(jsonText))
      if (parsed is Mapping<String, APIServerRequestUploads>)
        parsed as Mapping<String, APIServerRequestUploads>
      else
        new Mapping<String, APIServerRequestUploads> {}
    else
      new Mapping<String, APIServerRequestUploads> {}
    else new Mapping<String, APIServerRequestUploads> {})
  filesMap.values.toList().filter((it) -> it.Filetype == mimeType).map((it) -> it.Filepath)
