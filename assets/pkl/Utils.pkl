/// Tools for Kdeps Resources
///
/// This module includes tools for interacting with Kdeps
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/utils" }

open module org.kdeps.pkl.Utils

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:test"

// Base64 encoding/decoding removed - strings are used directly
// This function now always returns false since we don't use base64
function isBase64(str: String?) = false

/// Checks if a string is null or empty (including whitespace-only strings).
///
/// [value]: The string to check.
/// Returns `true` if the string is null, empty, or contains only whitespace, `false` otherwise.
function isEmpty(value: String?) = value == null || value.trim().isEmpty

/// Checks if a string is not null and not empty.
///
/// [value]: The string to check.
/// Returns `true` if the string has content, `false` otherwise.
function isNotEmpty(value: String?) = !isEmpty(value)

/// Trims whitespace from both ends of a string.
///
/// [value]: The string to trim.
/// Returns the trimmed string, or empty string if input is null.
function trimString(value: String?) = if (value != null) value.trim() else ""

/// Splits a string by a delimiter.
///
/// [value]: The string to split.
/// [delimiter]: The delimiter to split by.
/// Returns a list of string parts, or empty list if input is null/empty.
function splitString(value: String?, delimiter: String?) = 
  if (value != null && delimiter != null) value.split(delimiter) else List()

/// Joins a list of strings with a delimiter.
///
/// [parts]: The list of strings to join.
/// [delimiter]: The delimiter to use.
/// Returns the joined string, or empty string if parts is null/empty.
function joinStrings(parts: List<String>?, delimiter: String?) = 
  if (parts != null && delimiter != null) parts.join(delimiter) else ""

/// Formats a string by replacing placeholders with values.
///
/// [template]: The template string with {0}, {1}, etc. placeholders.
/// [values]: The values to substitute.
/// Returns the formatted string.
function formatString(template: String?, values: List<String>?) = 
  if (template != null && values != null) 
    values.foldIndexed(template, (acc, idx, value) -> acc.replaceAll("\\{" + idx + "\\}", value))
  else template ?? ""

/// Checks if a string looks like a valid email address.
///
/// [email]: The email string to validate.
/// Returns `true` if the string appears to be a valid email, `false` otherwise.
function isValidEmail(email: String?) = 
  if (email != null) 
    email.matches(Regex(#"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"#))
  else false

/// Checks if a string looks like a valid URL.
///
/// [url]: The URL string to validate.
/// Returns `true` if the string appears to be a valid URL, `false` otherwise.
function isValidURL(url: String?) = 
  if (url != null) 
    url.matches(Regex(#"^https?://[a-zA-Z0-9.-]+(/.*)?$"#))
  else false

/// Checks if a string contains only numeric characters.
///
/// [value]: The string to check.
/// Returns `true` if the string contains only digits, `false` otherwise.
function isNumeric(value: String?) = 
  if (value != null && !value.isEmpty) 
    value.matches(Regex(#"^\d+$"#))
  else false

/// Checks if a string contains only alphanumeric characters.
///
/// [value]: The string to check.
/// Returns `true` if the string contains only letters and digits, `false` otherwise.
function isAlphanumeric(value: String?) = 
  if (value != null && !value.isEmpty) 
    value.matches(Regex(#"^[a-zA-Z0-9]+$"#))
  else false

/// Converts a string to lowercase.
///
/// [value]: The string to convert.
/// Returns the lowercase string, or empty string if input is null.
function toLowerCase(value: String?) = if (value != null) value.toLowerCase() else ""

/// Converts a string to uppercase.
///
/// [value]: The string to convert.
/// Returns the uppercase string, or empty string if input is null.
function toUpperCase(value: String?) = if (value != null) value.toUpperCase() else ""

/// Capitalizes the first letter of a string.
///
/// [value]: The string to capitalize.
/// Returns the capitalized string, or empty string if input is null.
function capitalize(value: String?) = 
  if (value != null && !value.isEmpty) 
    value.substring(0, 1).toUpperCase() + value.substring(1).toLowerCase()
  else ""

/// Removes all occurrences of a substring from a string.
///
/// [value]: The source string.
/// [toRemove]: The substring to remove.
/// Returns the string with all occurrences removed.
function removeSubstring(value: String?, toRemove: String?) = 
  if (value != null && toRemove != null) 
    value.replaceAll(toRemove, "")
  else value ?? ""

/// Counts the number of occurrences of a substring in a string.
///
/// [value]: The source string.
/// [substring]: The substring to count.
/// Returns the number of occurrences.
function countOccurrences(value: String?, substring: String?) = 
  if (value != null && substring != null && !substring.isEmpty) 
    let (parts = value.split(substring)) parts.length - 1
  else 0

/// Truncates a string to a maximum length and adds ellipsis if needed.
///
/// [value]: The string to truncate.
/// [maxLength]: The maximum length.
/// Returns the truncated string with "..." if it was shortened.
function truncate(value: String?, maxLength: Int?) = 
  if (value != null && maxLength != null) 
    if (value.length <= maxLength) value
    else value.substring(0, maxLength - 3) + "..."
  else value ?? ""
